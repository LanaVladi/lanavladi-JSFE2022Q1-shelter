(()=>{"use strict";var n={669:(n,e,t)=>{t.d(e,{Z:()=>s});var o=t(15),r=t.n(o),i=t(645),A=t.n(i)()(r());A.push([n.id,".news {\n  display: flex;\n  flex-direction: column;\n  width: 61vw;\n  height: 100%;\n  overflow: hidden;\n  align-items: flex-start;\n}\n\n.news__item {\n  display: flex;\n  flex-direction: column;\n  margin: 1rem auto;\n  margin-bottom: 1.6%;\n  background: #fff;\n  color: #333;\n  line-height: 1.4;\n  font-family: Arial, sans-serif;\n  border-radius: 5px;\n}\n\n.news__item:hover .news__meta-photo {\n  transform: scale(1.3) rotate(3deg);\n}\n\n.news__item .news__meta {\n  position: relative;\n  height: 200px;\n}\n\n.news__item .news__meta-photo {\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  background-size: cover;\n  background-position: center;\n  transition: transform 0.2s;\n}\n\n.news__item .news__meta-details,\n.news__item .news__meta-details ul {\n  margin: auto;\n  padding: 0;\n  list-style: none;\n}\n\n.news__item .news__meta-details {\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: -450%;\n  margin: auto;\n  transition: left 0.2s;\n  background: rgba(0, 0, 0, 0.6);\n  color: #fff;\n  padding: 10px;\n  width: 100%;\n  font-size: 0.9rem;\n}\n\n.news__item .news__description {\n  padding: 1rem;\n  background: #fff;\n  position: relative;\n  z-index: 1;\n}\n\n.news__item .news__description h2 {\n  line-height: 1;\n  margin: 0;\n  font-size: 1.7rem;\n}\n\n.news__item .news__description h3 {\n  font-size: 1rem;\n  font-weight: 300;\n  text-transform: uppercase;\n  color: #a2a2a2;\n  margin-top: 5px;\n}\n\n.news__item .news__description .news__read-more {\n  text-align: right;\n}\n\n.news__item .news__description .news__read-more a {\n  color: #5ad67d;\n  display: inline-block;\n  position: relative;\n  text-decoration: none;\n  font-weight: 800;\n}\n\n.news__item .news__description .news__read-more a:after {\n  content: '→';\n  margin-left: -10px;\n  opacity: 0;\n  vertical-align: middle;\n  transition: margin 0.3s, opacity 0.3s;\n}\n\n.news__item .news__description .news__read-more a:hover:after {\n  margin-left: 5px;\n  opacity: 1;\n}\n\n.news__item p {\n  margin: 1rem 0 0;\n}\n\n.news__item p:first-of-type {\n  margin-top: 1.25rem;\n  position: relative;\n}\n\n.news__item p:first-of-type:before {\n  content: '';\n  position: absolute;\n  height: 5px;\n  background: #5ad67d;\n  width: 35px;\n  top: -0.75rem;\n  border-radius: 3px;\n}\n\n.news__item:hover .news__meta-details {\n  left: 0%;\n}\n\n@media only screen and (max-width: 1920px) and (min-width: 1000px) {\n  .news__item {\n    max-width: 800px;\n  }\n}\n\n@media only screen and (max-width: 767px) and (min-width: 641px) {\n  .news {\n    width: 100%;\n  }\n}\n\n@media (min-width: 640px) {\n  .news__item {\n    flex-direction: row;\n    max-width: 700px;\n    padding: 1em 1em;\n  }\n\n  .news__item .news__meta {\n    flex-basis: 40%;\n    height: auto;\n  }\n\n  .news__item .news__description {\n    flex-basis: 60%;\n  }\n\n  .news__item .news__description:before {\n    -webkit-transform: skewX(-3deg);\n    transform: skewX(-3deg);\n    content: '';\n    background: #fff;\n    width: 30px;\n    position: absolute;\n    left: -10px;\n    top: 0;\n    bottom: 0;\n    z-index: -1;\n  }\n\n  .news__item.alt {\n    flex-direction: row-reverse;\n  }\n\n  .news__item.alt .news__description:before {\n    left: inherit;\n    right: -10px;\n    -webkit-transform: skew(3deg);\n    transform: skew(3deg);\n  }\n\n  .news__item.alt .news__meta-details {\n    padding-left: 25px;\n  }\n\n  @media only screen and (max-width: 639px) and (min-width: 320px) {\n    .news {\n      width: 100%;\n    }\n\n    .news__item .news__meta {\n      height: 330px;\n    }\n  }\n}","",{version:3,sources:["webpack://./src/components/view/news/news.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,sBAAsB;EACtB,WAAW;EACX,YAAY;EACZ,gBAAgB;EAChB,uBAAuB;AACzB;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,iBAAiB;EACjB,mBAAmB;EACnB,gBAAgB;EAChB,WAAW;EACX,gBAAgB;EAChB,8BAA8B;EAC9B,kBAAkB;AACpB;;AAEA;EACE,kCAAkC;AACpC;;AAEA;EACE,kBAAkB;EAClB,aAAa;AACf;;AAEA;EACE,kBAAkB;EAClB,MAAM;EACN,QAAQ;EACR,SAAS;EACT,OAAO;EACP,sBAAsB;EACtB,2BAA2B;EAC3B,0BAA0B;AAC5B;;AAEA;;EAEE,YAAY;EACZ,UAAU;EACV,gBAAgB;AAClB;;AAEA;EACE,kBAAkB;EAClB,MAAM;EACN,SAAS;EACT,WAAW;EACX,YAAY;EACZ,qBAAqB;EACrB,8BAA8B;EAC9B,WAAW;EACX,aAAa;EACb,WAAW;EACX,iBAAiB;AACnB;;AAEA;EACE,aAAa;EACb,gBAAgB;EAChB,kBAAkB;EAClB,UAAU;AACZ;;AAEA;EACE,cAAc;EACd,SAAS;EACT,iBAAiB;AACnB;;AAEA;EACE,eAAe;EACf,gBAAgB;EAChB,yBAAyB;EACzB,cAAc;EACd,eAAe;AACjB;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,cAAc;EACd,qBAAqB;EACrB,kBAAkB;EAClB,qBAAqB;EACrB,gBAAgB;AAClB;;AAEA;EACE,YAAY;EACZ,kBAAkB;EAClB,UAAU;EACV,sBAAsB;EACtB,qCAAqC;AACvC;;AAEA;EACE,gBAAgB;EAChB,UAAU;AACZ;;AAEA;EACE,gBAAgB;AAClB;;AAEA;EACE,mBAAmB;EACnB,kBAAkB;AACpB;;AAEA;EACE,WAAW;EACX,kBAAkB;EAClB,WAAW;EACX,mBAAmB;EACnB,WAAW;EACX,aAAa;EACb,kBAAkB;AACpB;;AAEA;EACE,QAAQ;AACV;;AAEA;EACE;IACE,gBAAgB;EAClB;AACF;;AAEA;EACE;IACE,WAAW;EACb;AACF;;AAEA;EACE;IACE,mBAAmB;IACnB,gBAAgB;IAChB,gBAAgB;EAClB;;EAEA;IACE,eAAe;IACf,YAAY;EACd;;EAEA;IACE,eAAe;EACjB;;EAEA;IACE,+BAA+B;IAC/B,uBAAuB;IACvB,WAAW;IACX,gBAAgB;IAChB,WAAW;IACX,kBAAkB;IAClB,WAAW;IACX,MAAM;IACN,SAAS;IACT,WAAW;EACb;;EAEA;IACE,2BAA2B;EAC7B;;EAEA;IACE,aAAa;IACb,YAAY;IACZ,6BAA6B;IAC7B,qBAAqB;EACvB;;EAEA;IACE,kBAAkB;EACpB;;EAEA;IACE;MACE,WAAW;IACb;;IAEA;MACE,aAAa;IACf;EACF;AACF",sourcesContent:[".news {\n  display: flex;\n  flex-direction: column;\n  width: 61vw;\n  height: 100%;\n  overflow: hidden;\n  align-items: flex-start;\n}\n\n.news__item {\n  display: flex;\n  flex-direction: column;\n  margin: 1rem auto;\n  margin-bottom: 1.6%;\n  background: #fff;\n  color: #333;\n  line-height: 1.4;\n  font-family: Arial, sans-serif;\n  border-radius: 5px;\n}\n\n.news__item:hover .news__meta-photo {\n  transform: scale(1.3) rotate(3deg);\n}\n\n.news__item .news__meta {\n  position: relative;\n  height: 200px;\n}\n\n.news__item .news__meta-photo {\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  background-size: cover;\n  background-position: center;\n  transition: transform 0.2s;\n}\n\n.news__item .news__meta-details,\n.news__item .news__meta-details ul {\n  margin: auto;\n  padding: 0;\n  list-style: none;\n}\n\n.news__item .news__meta-details {\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: -450%;\n  margin: auto;\n  transition: left 0.2s;\n  background: rgba(0, 0, 0, 0.6);\n  color: #fff;\n  padding: 10px;\n  width: 100%;\n  font-size: 0.9rem;\n}\n\n.news__item .news__description {\n  padding: 1rem;\n  background: #fff;\n  position: relative;\n  z-index: 1;\n}\n\n.news__item .news__description h2 {\n  line-height: 1;\n  margin: 0;\n  font-size: 1.7rem;\n}\n\n.news__item .news__description h3 {\n  font-size: 1rem;\n  font-weight: 300;\n  text-transform: uppercase;\n  color: #a2a2a2;\n  margin-top: 5px;\n}\n\n.news__item .news__description .news__read-more {\n  text-align: right;\n}\n\n.news__item .news__description .news__read-more a {\n  color: #5ad67d;\n  display: inline-block;\n  position: relative;\n  text-decoration: none;\n  font-weight: 800;\n}\n\n.news__item .news__description .news__read-more a:after {\n  content: '→';\n  margin-left: -10px;\n  opacity: 0;\n  vertical-align: middle;\n  transition: margin 0.3s, opacity 0.3s;\n}\n\n.news__item .news__description .news__read-more a:hover:after {\n  margin-left: 5px;\n  opacity: 1;\n}\n\n.news__item p {\n  margin: 1rem 0 0;\n}\n\n.news__item p:first-of-type {\n  margin-top: 1.25rem;\n  position: relative;\n}\n\n.news__item p:first-of-type:before {\n  content: '';\n  position: absolute;\n  height: 5px;\n  background: #5ad67d;\n  width: 35px;\n  top: -0.75rem;\n  border-radius: 3px;\n}\n\n.news__item:hover .news__meta-details {\n  left: 0%;\n}\n\n@media only screen and (max-width: 1920px) and (min-width: 1000px) {\n  .news__item {\n    max-width: 800px;\n  }\n}\n\n@media only screen and (max-width: 767px) and (min-width: 641px) {\n  .news {\n    width: 100%;\n  }\n}\n\n@media (min-width: 640px) {\n  .news__item {\n    flex-direction: row;\n    max-width: 700px;\n    padding: 1em 1em;\n  }\n\n  .news__item .news__meta {\n    flex-basis: 40%;\n    height: auto;\n  }\n\n  .news__item .news__description {\n    flex-basis: 60%;\n  }\n\n  .news__item .news__description:before {\n    -webkit-transform: skewX(-3deg);\n    transform: skewX(-3deg);\n    content: '';\n    background: #fff;\n    width: 30px;\n    position: absolute;\n    left: -10px;\n    top: 0;\n    bottom: 0;\n    z-index: -1;\n  }\n\n  .news__item.alt {\n    flex-direction: row-reverse;\n  }\n\n  .news__item.alt .news__description:before {\n    left: inherit;\n    right: -10px;\n    -webkit-transform: skew(3deg);\n    transform: skew(3deg);\n  }\n\n  .news__item.alt .news__meta-details {\n    padding-left: 25px;\n  }\n\n  @media only screen and (max-width: 639px) and (min-width: 320px) {\n    .news {\n      width: 100%;\n    }\n\n    .news__item .news__meta {\n      height: 330px;\n    }\n  }\n}"],sourceRoot:""}]);const s=A},501:(n,e,t)=>{t.d(e,{Z:()=>s});var o=t(15),r=t.n(o),i=t(645),A=t.n(i)()(r());A.push([n.id,".sources {\n  display: flex;\n  flex-direction: column;\n  width: 35vw;\n  height: 277vh;\n  overflow: auto;\n  align-items: center;\n  font: 300 1em 'Fira Sans', sans-serif;\n}\n\n.source__item {\n  background: none;\n  border: 2px solid #30c5ff;\n  font: inherit;\n  line-height: 1;\n  margin: 0.5em;\n  padding: 1em 2em;\n  color: #70d6ff;\n  transition: 0.25s;\n  cursor: pointer;\n}\n\n.source__item:hover,\n.source__item:focus {\n  border-color: #3fcc59;\n  color: #69db7e;\n  box-shadow: 0 0.5em 0.5em -0.4em #3fcc59;\n  transform: translateY(-0.25em);\n}\n\n.source__item-name {\n  font-weight: 400;\n  white-space: nowrap;\n}\n\n@media only screen and (max-width: 1920px) and (min-width: 1000px) {\n  .sources {\n    align-items: flex-start;\n  }\n}\n\n@media only screen and (max-width: 999px) and (min-width: 768px) {\n  .sources {\n    min-height: 338vh;\n  }\n}\n\n@media only screen and (max-width: 767px) and (min-width: 320px) {\n  .sources {\n    flex-direction: row;\n    flex-wrap: nowrap;\n    width: 100%;\n    height: 120px;\n  }\n}","",{version:3,sources:["webpack://./src/components/view/sources/sources.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,sBAAsB;EACtB,WAAW;EACX,aAAa;EACb,cAAc;EACd,mBAAmB;EACnB,qCAAqC;AACvC;;AAEA;EACE,gBAAgB;EAChB,yBAAyB;EACzB,aAAa;EACb,cAAc;EACd,aAAa;EACb,gBAAgB;EAChB,cAAc;EACd,iBAAiB;EACjB,eAAe;AACjB;;AAEA;;EAEE,qBAAqB;EACrB,cAAc;EACd,wCAAwC;EACxC,8BAA8B;AAChC;;AAEA;EACE,gBAAgB;EAChB,mBAAmB;AACrB;;AAEA;EACE;IACE,uBAAuB;EACzB;AACF;;AAEA;EACE;IACE,iBAAiB;EACnB;AACF;;AAEA;EACE;IACE,mBAAmB;IACnB,iBAAiB;IACjB,WAAW;IACX,aAAa;EACf;AACF",sourcesContent:[".sources {\n  display: flex;\n  flex-direction: column;\n  width: 35vw;\n  height: 277vh;\n  overflow: auto;\n  align-items: center;\n  font: 300 1em 'Fira Sans', sans-serif;\n}\n\n.source__item {\n  background: none;\n  border: 2px solid #30c5ff;\n  font: inherit;\n  line-height: 1;\n  margin: 0.5em;\n  padding: 1em 2em;\n  color: #70d6ff;\n  transition: 0.25s;\n  cursor: pointer;\n}\n\n.source__item:hover,\n.source__item:focus {\n  border-color: #3fcc59;\n  color: #69db7e;\n  box-shadow: 0 0.5em 0.5em -0.4em #3fcc59;\n  transform: translateY(-0.25em);\n}\n\n.source__item-name {\n  font-weight: 400;\n  white-space: nowrap;\n}\n\n@media only screen and (max-width: 1920px) and (min-width: 1000px) {\n  .sources {\n    align-items: flex-start;\n  }\n}\n\n@media only screen and (max-width: 999px) and (min-width: 768px) {\n  .sources {\n    min-height: 338vh;\n  }\n}\n\n@media only screen and (max-width: 767px) and (min-width: 320px) {\n  .sources {\n    flex-direction: row;\n    flex-wrap: nowrap;\n    width: 100%;\n    height: 120px;\n  }\n}"],sourceRoot:""}]);const s=A},767:(n,e,t)=>{t.d(e,{Z:()=>s});var o=t(15),r=t.n(o),i=t(645),A=t.n(i)()(r());A.push([n.id,"body {\n  color: #fff;\n  background: #17181c;\n  font-family: sans-serif;\n}\n\nheader {\n  padding: 10px 30px;\n}\n\nheader h1 {\n  font-size: 40px;\n  font-weight: 800;\n}\n\n.wrapper {\n  display: flex;\n  justify-content: space-between;\n  align-items: flex-start;\n  height: 100%;\n  width: 96vw;\n}\n\n\nfooter {\n  height: 100px;\n  display: flex;\n  align-items: center;\n  justify-content: space-evenly;\n}\n\nfooter .copyright {\n  font-size: 16px;\n  color: #70d6ff;\n  text-align: center;\n}\n\nfooter .copyright a {\n  color: #3fcc59;\n}\n\nfooter .copyright a:hover {\n  color: #3fcc59;\n}\n\nfooter .copyright:before {\n  content: '©';\n}\n\nfooter .github-link {\n  font-size: 16px;\n  text-decoration: none;\n  color: #70d6ff;\n}\n\nfooter .github-link:hover {\n  color: #3fcc59;\n  transition: 0.3s;\n}\n\nfooter .RSS-logo {\n  width: 20px;\n  height: 20px;\n  display: flex;\n  align-items: center;\n}\n\nfooter .RSS-logo-img {\n  width: 120px;\n  height: 80px;\n  cursor: pointer;\n}\n\nfooter .RSS-logo .RSS-link a {\n  width: 100%;\n  height: 100%;\n  cursor: pointer;\n}\n\n@media only screen and (max-width: 767px) and (min-width: 320px) {\n  .wrapper {\n    flex-direction: column;\n    align-items: center;\n    width: 100%;\n  }\n\n  .footer {\n    justify-content: center;\n  }\n\n  footer .RSS-logo-img {\n    width: 50px;\n    height: 48px;\n  }\n}","",{version:3,sources:["webpack://./src/global.css"],names:[],mappings:"AAAA;EACE,WAAW;EACX,mBAAmB;EACnB,uBAAuB;AACzB;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,eAAe;EACf,gBAAgB;AAClB;;AAEA;EACE,aAAa;EACb,8BAA8B;EAC9B,uBAAuB;EACvB,YAAY;EACZ,WAAW;AACb;;;AAGA;EACE,aAAa;EACb,aAAa;EACb,mBAAmB;EACnB,6BAA6B;AAC/B;;AAEA;EACE,eAAe;EACf,cAAc;EACd,kBAAkB;AACpB;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,eAAe;EACf,qBAAqB;EACrB,cAAc;AAChB;;AAEA;EACE,cAAc;EACd,gBAAgB;AAClB;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,aAAa;EACb,mBAAmB;AACrB;;AAEA;EACE,YAAY;EACZ,YAAY;EACZ,eAAe;AACjB;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,eAAe;AACjB;;AAEA;EACE;IACE,sBAAsB;IACtB,mBAAmB;IACnB,WAAW;EACb;;EAEA;IACE,uBAAuB;EACzB;;EAEA;IACE,WAAW;IACX,YAAY;EACd;AACF",sourcesContent:["body {\n  color: #fff;\n  background: #17181c;\n  font-family: sans-serif;\n}\n\nheader {\n  padding: 10px 30px;\n}\n\nheader h1 {\n  font-size: 40px;\n  font-weight: 800;\n}\n\n.wrapper {\n  display: flex;\n  justify-content: space-between;\n  align-items: flex-start;\n  height: 100%;\n  width: 96vw;\n}\n\n\nfooter {\n  height: 100px;\n  display: flex;\n  align-items: center;\n  justify-content: space-evenly;\n}\n\nfooter .copyright {\n  font-size: 16px;\n  color: #70d6ff;\n  text-align: center;\n}\n\nfooter .copyright a {\n  color: #3fcc59;\n}\n\nfooter .copyright a:hover {\n  color: #3fcc59;\n}\n\nfooter .copyright:before {\n  content: '©';\n}\n\nfooter .github-link {\n  font-size: 16px;\n  text-decoration: none;\n  color: #70d6ff;\n}\n\nfooter .github-link:hover {\n  color: #3fcc59;\n  transition: 0.3s;\n}\n\nfooter .RSS-logo {\n  width: 20px;\n  height: 20px;\n  display: flex;\n  align-items: center;\n}\n\nfooter .RSS-logo-img {\n  width: 120px;\n  height: 80px;\n  cursor: pointer;\n}\n\nfooter .RSS-logo .RSS-link a {\n  width: 100%;\n  height: 100%;\n  cursor: pointer;\n}\n\n@media only screen and (max-width: 767px) and (min-width: 320px) {\n  .wrapper {\n    flex-direction: column;\n    align-items: center;\n    width: 100%;\n  }\n\n  .footer {\n    justify-content: center;\n  }\n\n  footer .RSS-logo-img {\n    width: 50px;\n    height: 48px;\n  }\n}"],sourceRoot:""}]);const s=A},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t=n(e);return e[2]?"@media ".concat(e[2]," {").concat(t,"}"):t})).join("")},e.i=function(n,t,o){"string"==typeof n&&(n=[[null,n,""]]);var r={};if(o)for(var i=0;i<this.length;i++){var A=this[i][0];null!=A&&(r[A]=!0)}for(var s=0;s<n.length;s++){var a=[].concat(n[s]);o&&r[a[0]]||(t&&(a[2]?a[2]="".concat(t," and ").concat(a[2]):a[2]=t),e.push(a))}},e}},15:n=>{function e(n,e){(null==e||e>n.length)&&(e=n.length);for(var t=0,o=new Array(e);t<e;t++)o[t]=n[t];return o}n.exports=function(n){var t,o,r=(o=4,function(n){if(Array.isArray(n))return n}(t=n)||function(n,e){var t=n&&("undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"]);if(null!=t){var o,r,i=[],A=!0,s=!1;try{for(t=t.call(n);!(A=(o=t.next()).done)&&(i.push(o.value),!e||i.length!==e);A=!0);}catch(n){s=!0,r=n}finally{try{A||null==t.return||t.return()}finally{if(s)throw r}}return i}}(t,o)||function(n,t){if(n){if("string"==typeof n)return e(n,t);var o=Object.prototype.toString.call(n).slice(8,-1);return"Object"===o&&n.constructor&&(o=n.constructor.name),"Map"===o||"Set"===o?Array.from(n):"Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o)?e(n,t):void 0}}(t,o)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=r[1],A=r[3];if(!A)return i;if("function"==typeof btoa){var s=btoa(unescape(encodeURIComponent(JSON.stringify(A)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),c="/*# ".concat(a," */"),d=A.sources.map((function(n){return"/*# sourceURL=".concat(A.sourceRoot||"").concat(n," */")}));return[i].concat(d).concat([c]).join("\n")}return[i].join("\n")}},242:(n,e,t)=>{t.r(e),t.d(e,{default:()=>A});var o=t(379),r=t.n(o),i=t(669);r()(i.Z,{insert:"head",singleton:!1});const A=i.Z.locals||{}},595:(n,e,t)=>{t.r(e),t.d(e,{default:()=>A});var o=t(379),r=t.n(o),i=t(501);r()(i.Z,{insert:"head",singleton:!1});const A=i.Z.locals||{}},427:(n,e,t)=>{t.r(e),t.d(e,{default:()=>A});var o=t(379),r=t.n(o),i=t(767);r()(i.Z,{insert:"head",singleton:!1});const A=i.Z.locals||{}},379:(n,e,t)=>{var o,r=function(){var n={};return function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}n[e]=t}return n[e]}}(),i=[];function A(n){for(var e=-1,t=0;t<i.length;t++)if(i[t].identifier===n){e=t;break}return e}function s(n,e){for(var t={},o=[],r=0;r<n.length;r++){var s=n[r],a=e.base?s[0]+e.base:s[0],c=t[a]||0,d="".concat(a," ").concat(c);t[a]=c+1;var l=A(d),f={css:s[1],media:s[2],sourceMap:s[3]};-1!==l?(i[l].references++,i[l].updater(f)):i.push({identifier:d,updater:p(f,e),references:1}),o.push(d)}return o}function a(n){var e=document.createElement("style"),o=n.attributes||{};if(void 0===o.nonce){var i=t.nc;i&&(o.nonce=i)}if(Object.keys(o).forEach((function(n){e.setAttribute(n,o[n])})),"function"==typeof n.insert)n.insert(e);else{var A=r(n.insert||"head");if(!A)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");A.appendChild(e)}return e}var c,d=(c=[],function(n,e){return c[n]=e,c.filter(Boolean).join("\n")});function l(n,e,t,o){var r=t?"":o.media?"@media ".concat(o.media," {").concat(o.css,"}"):o.css;if(n.styleSheet)n.styleSheet.cssText=d(e,r);else{var i=document.createTextNode(r),A=n.childNodes;A[e]&&n.removeChild(A[e]),A.length?n.insertBefore(i,A[e]):n.appendChild(i)}}function f(n,e,t){var o=t.css,r=t.media,i=t.sourceMap;if(r?n.setAttribute("media",r):n.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),n.styleSheet)n.styleSheet.cssText=o;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(o))}}var u=null,m=0;function p(n,e){var t,o,r;if(e.singleton){var i=m++;t=u||(u=a(e)),o=l.bind(null,t,i,!1),r=l.bind(null,t,i,!0)}else t=a(e),o=f.bind(null,t,e),r=function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(t)};return o(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap)return;o(n=e)}else r()}}n.exports=function(n,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=(void 0===o&&(o=Boolean(window&&document&&document.all&&!window.atob)),o));var t=s(n=n||[],e);return function(n){if(n=n||[],"[object Array]"===Object.prototype.toString.call(n)){for(var o=0;o<t.length;o++){var r=A(t[o]);i[r].references--}for(var a=s(n,e),c=0;c<t.length;c++){var d=A(t[c]);0===i[d].references&&(i[d].updater(),i.splice(d,1))}t=a}}}},717:function(n,e,t){var o=this&&this.__importDefault||function(n){return n&&n.__esModule?n:{default:n}};Object.defineProperty(e,"__esModule",{value:!0});const r=o(t(842)),i=t(527);e.default=class{constructor(){this.controller=new r.default,this.view=new i.AppView}start(){document.querySelector(".sources").addEventListener("click",(n=>this.controller.getNews(n,(n=>this.view.drawNews(n))))),this.controller.getSources((n=>this.view.drawSources(n)))}}},853:function(n,e,t){var o=this&&this.__importDefault||function(n){return n&&n.__esModule?n:{default:n}};Object.defineProperty(e,"__esModule",{value:!0});const r=o(t(24));class i extends r.default{constructor(){super("https://nodenews.herokuapp.com/",{apiKey:"a32fe19ad6754b2a8ee089da70f56554"})}}e.default=i},842:function(n,e,t){var o=this&&this.__importDefault||function(n){return n&&n.__esModule?n:{default:n}};Object.defineProperty(e,"__esModule",{value:!0});const r=o(t(853));class i extends r.default{getSources(n){super.getResp({endpoint:"sources"},n)}getNews(n,e){let t=n.target;const o=n.currentTarget;for(;t!==o;){if(t.classList.contains("source__item")){const n=t.getAttribute("data-source-id");return void(o.getAttribute("data-source")!==n&&(o.setAttribute("data-source",n),super.getResp({endpoint:"everything",options:{sources:n}},e)))}t=t.parentNode}}}e.default=i},24:(n,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.default=class{constructor(n,e){this.baseLink=n,this.options=e}getResp({endpoint:n,options:e={}},t=(()=>{console.error("No callback for GET response")})){this.load("GET",n,t,e)}errorHandler(n){if(!n.ok)throw 401!==n.status&&404!==n.status||console.log(`Sorry, but there is ${n.status} error: ${n.statusText}`),Error(n.statusText);return n}makeUrl(n,e){const t=Object.assign(Object.assign({},this.options),n);let o=`${this.baseLink}${e}?`;return Object.keys(t).forEach((n=>{o+=`${n}=${t[n]}&`})),o.slice(0,-1)}load(n,e,t,o={}){fetch(this.makeUrl(o,e),{method:n}).then(this.errorHandler).then((n=>n.json())).then((n=>t(n))).catch((n=>console.error(n)))}}},527:function(n,e,t){var o=this&&this.__importDefault||function(n){return n&&n.__esModule?n:{default:n}};Object.defineProperty(e,"__esModule",{value:!0}),e.AppView=void 0;const r=o(t(798)),i=o(t(53));class A{constructor(){this.news=new r.default,this.sources=new i.default}drawNews(n){const e=(null==n?void 0:n.articles)?null==n?void 0:n.articles:[];this.news.draw(e)}drawSources(n){const e=(null==n?void 0:n.sources)?null==n?void 0:n.sources:[];this.sources.draw(e)}}e.AppView=A,e.default=A},798:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),t(242),e.default=class{draw(n){const e=n.length>=10?n.filter(((n,e)=>e<10)):n,t=document.createDocumentFragment(),o=document.querySelector("#newsItemTemp");if(null===o)throw new Error("Could not find element.");e.forEach(((n,e)=>{const r=o.content.cloneNode(!0);e%2&&r.querySelector(".news__item").classList.add("alt"),r.querySelector(".news__meta-photo").style.backgroundImage=`url(${n.urlToImage||"img/news_placeholder.png"})`,r.querySelector(".news__meta-author").textContent=n.author||n.source.name,r.querySelector(".news__meta-date").textContent=n.publishedAt.slice(0,10).split("-").reverse().join("-"),r.querySelector(".news__description-title").textContent=n.title,r.querySelector(".news__description-source").textContent=n.source.name,r.querySelector(".news__description-content").textContent=n.description,r.querySelector(".news__read-more a").setAttribute("href",n.url),t.append(r)})),document.querySelector(".news").innerHTML="",document.querySelector(".news").appendChild(t)}}},53:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),t(595),e.default=class{draw(n){const e=document.createDocumentFragment(),t=document.querySelector("#sourceItemTemp");if(null===t)throw new Error("Could not find element.");n.forEach((n=>{const o=t.content.cloneNode(!0);o.querySelector(".source__item-name").textContent=n.name,o.querySelector(".source__item").setAttribute("data-source-id",n.id),e.append(o)})),document.querySelector(".sources").append(e)}}},607:function(n,e,t){var o=this&&this.__importDefault||function(n){return n&&n.__esModule?n:{default:n}};Object.defineProperty(e,"__esModule",{value:!0});const r=o(t(717));t(427),(new r.default).start()}},e={};function t(o){var r=e[o];if(void 0!==r)return r.exports;var i=e[o]={id:o,exports:{}};return n[o].call(i.exports,i,i.exports,t),i.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var o in e)t.o(e,o)&&!t.o(n,o)&&Object.defineProperty(n,o,{enumerable:!0,get:e[o]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),t.r=n=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},t(607)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,